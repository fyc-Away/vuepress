{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{360:function(t,e,a){\"use strict\";a.r(e);var s=a(43),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"react\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react\"}},[t._v(\"#\")]),t._v(\" react\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"给我介绍一下react\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#给我介绍一下react\"}},[t._v(\"#\")]),t._v(\" 给我介绍一下react\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"以前我们没有jquery的时候，我们大概的流程是从后端通过ajax获取到数据然后使用jquery生成dom结果然后更新到页面当中，但是随着业务发展，我们的项目可能会越来越复杂，我们每次请求到数据，或则数据有更改的时候，我们又需要重新组装一次dom结构，然后更新页面，这样我们手动同步dom和数据的成本就越来越高，而且频繁的操作dom，也使我我们页面的性能慢慢的降低。\")]),t._v(\" \"),a(\"li\",[t._v(\"这个时候mvvm出现了，mvvm的双向数据绑定可以让我们在数据修改的同时同步dom的更新，dom的更新也可以直接同步我们数据的更改，这个特定可以大大降低我们手动去维护dom更新的成本，\"),a(\"strong\",[t._v(\"mvvm为react的特性之一，虽然react属于单项数据流，需要我们手动实现双向数据绑定。\")])]),t._v(\" \"),a(\"li\",[t._v(\"有了mvvm还不够，因为如果每次有数据做了更改，然后我们都全量更新dom结构的话，也没办法解决我们频繁操作dom结构(降低了页面性能)的问题，为了解决这个问题，\"),a(\"strong\",[t._v(\"react内部实现了一套虚拟dom结构\")]),t._v(\"，也就是用js实现的一套dom结构，他的\"),a(\"strong\",[t._v(\"作用是将真实dom在js中做一套缓存\")]),t._v(\"，每次有数据更改的时候，react内部先使用算法，也就是鼎鼎有名的diff算法对dom结构进行对比，找到那些我们需要新增、更新、删除的dom节点，然后一次性对真实DOM进行更新，这样就大大降低了操作dom的次数。 那么diff算法是怎么运作的呢，首先，diff针对类型不同的节点，会直接判定原来节点需要卸载并且用新的节点来装载卸载的节点的位置；针对于节点类型相同的节点，会对比这个节点的所有属性，如果节点的所有属性相同，那么判定这个节点不需要更新，如果节点属性不相同，那么会判定这个节点需要更新，react会更新并重渲染这个节点。\")]),t._v(\" \"),a(\"li\",[t._v(\"react设计之初是主要负责UI层的渲染，虽然每个组件有自己的state，state表示组件的状态，当状态需要变化的时候，需要使用setState更新我们的组件，但是，我们想通过一个组件重渲染它的兄弟组件，我们就需要将组件的状态提升到父组件当中，让父组件的状态来控制这两个组件的重渲染，当我们组件的层次越来越深的时候，状态需要一直往下传，无疑加大了我们代码的复杂度，我们需要一个状态管理中心，来帮我们管理我们状态state。\")]),t._v(\" \"),a(\"li\",[t._v(\"这个时候，redux出现了，我们可以将所有的state交给redux去管理，当我们的某一个state有变化的时候，依赖到这个state的组件就会进行一次重渲染，这样就解决了我们的我们需要一直把state往下传的问题。redux有action、reducer的概念，action为唯一修改state的来源，reducer为唯一确定state如何变化的入口，这使得redux的数据流非常规范，同时也暴露出了redux代码的复杂，本来那么简单的功能，却需要完成那么多的代码。\")]),t._v(\" \"),a(\"li\",[t._v(\"后来，社区就出现了另外一套解决方案，也就是mobx，它推崇代码简约易懂，只需要定义一个可观测的对象，然后哪个组价使用到这个可观测的对象，并且这个对象的数据有更改，那么这个组件就会重渲染，而且mobx内部也做好了是否重渲染组件的生命周期shouldUpdateComponent，不建议开发者进行更改，这使得我们使用mobx开发项目的时候可以简单快速的完成很多功能，连redux的作者也推荐使用mobx进行项目开发。但是，随着项目的不断变大，mobx也不断暴露出了它的缺点，就是数据流太随意，出了bug之后不好追溯数据的流向，这个缺点正好体现出了redux的优点所在，所以针对于小项目来说，社区推荐使用mobx，对大项目推荐使用redux\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"react和vue的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react和vue的区别\"}},[t._v(\"#\")]),t._v(\" react和vue的区别\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"   =>  相同点：\\n\\t1.数据驱动页面，提供响应式的视图组件\\n\\t2.都有virtual DOM,组件化的开发，通过props参数进行父子之间组件传递数据，都实现了webComponents规范\\n\\t3.数据流动单向，都支持服务器的渲染SSR\\n\\t4.都有支持native的方法，react有React native， vue有wexx\\n=>  不同点：\\n\\t1.数据绑定：Vue实现了双向的数据绑定，react数据流动是单向的\\n\\t2.数据渲染：大规模的数据渲染，react更快\\n\\t3.使用场景：React配合Redux架构适合大规模多人协作复杂项目，Vue适合小快的项目\\n\\t4.开发风格：react推荐做法jsx + inline style把html和css都写在js了\\n\\t\\t    vue是采用webpack + vue-loader单文件组件格式，html, js, css同一个文件\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"纯函数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#纯函数\"}},[t._v(\"#\")]),t._v(\" 纯函数\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"Redux数据流里，reduces其实是根据之前的状态（previous state）和现有的action（current action）\\n更新state(这个state可以理解为上下累加器的结果）\\n每次redux reducer被执行时，state和action被传入，这个state根据action进行累加或者是'自身消减'(reduce),\\n进而返回最新的state,这也就是典型reduce函数的用法：state ->  action ->  state\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"react的refs\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react的refs\"}},[t._v(\"#\")]),t._v(\" react的refs\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"refs就想一个逃生窗，允许我们之间访问dom元素或者组件实例，可以向组件添加一个ref属性的值是一个回调函数，\\n它将接受底层dom元素或组件的已挂在实例，作为第一个参数\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"react中的keys\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react中的keys\"}},[t._v(\"#\")]),t._v(\" react中的keys\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"帮组我们跟踪哪些项目已更改、添加、从列表中删除，key是独一无二的，可以让我们高效的去定位元素，并且操作它\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"react的生命周期\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react的生命周期\"}},[t._v(\"#\")]),t._v(\" React的生命周期\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"三个状态：Mounting(已插入真实的DOM）\\n\\t  Updating(正在被重新渲染)\\n\\t  Unmounting(已移除真实的DOM)\\ncomponentDIdMount 在第一次渲染后调用，只在客服端。之后组件已经生成对应的DOM结构，\\ncomponentDidUpdate 在组件完成更新后立即调用，在出初始化是不会调用\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"react子组件向父组件传值\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react子组件向父组件传值\"}},[t._v(\"#\")]),t._v(\" React子组件向父组件传值\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"父组件通过props 给子组件传递数据，子组件则是通过调用父组件传给它的函数给父组件传递数据。\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"为什么虚拟dom会提高性能\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么虚拟dom会提高性能\"}},[t._v(\"#\")]),t._v(\" 为什么虚拟DOM会提高性能\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"虚拟DOM相当于在js和真实dom中间加了一个缓存，利用dom diff算法避免了没有必要的dom操作，从而提高性能\\n具体实现步骤：\\n\\t·用JavaScript对象结构表示DOM树的结构；然后用这个树构建一个真正的DOM树，插到文档中\\n        ·当状态变更的时候，重新构造一棵树的对象树，然后用新的树和旧的树进行对比，记录两棵树差异\\n\\t·把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了。\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"reac性能优化是哪个周期函\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reac性能优化是哪个周期函\"}},[t._v(\"#\")]),t._v(\" reac性能优化是哪个周期函\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"shouldComponentUpdate 这个方法用来判断是否需要调用render方法重新描绘dom.因为dom的描绘非常消耗性能，\\n如果我们在shouldComponentUpdate方法中能够写出更优化的dom diff算法，可以极大的提高性能\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"怎么划分业务组件和技术组件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#怎么划分业务组件和技术组件\"}},[t._v(\"#\")]),t._v(\" 怎么划分业务组件和技术组件\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"根据组件的职责通常把组件分为UI组件和容器组件\\nUI组件负责UI的呈现，容器组件负责管理数据和逻辑\\n两者通过React-redux提供connect方法联系起来\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"setstate\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#setstate\"}},[t._v(\"#\")]),t._v(\" setState\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"setState通过一个队列机制实现state更新，当执行setState时，会将需要更新的state很后放入状态队列\\n而不会立即更新this.state，队列机制可以高效地批量更新state。如果不通过setState而直接修改this.state的值\\t\\n那么该state将不会被放入状态队列中。当下次调用setState并对状态队列进行合并时，就会忽略之前修改的state，造成不可预知的错误\\n\\n同时，也利用了队列机制实现了setState的异步更新，避免了频繁的重复更新state\\n\\n同步更新state:\\n\\tsetState 函数并不会阻塞等待状态更新完毕，因此 setNetworkActivityIndicatorVisible 有可能先于数据渲染完毕就执行。\\n\\t第二个参数是一个回调函数，在setState的异步操作结束并且组件已经重新渲染的时候执行\\n\\t也就是说，我们可以通过这个回调来拿到更新的state的值，实现代码的同步\\n\\n例子：componentDidMount() {\\n\\n\\tfetch('https://test.com')\\n    \\n\\t.then((res) => res.json())\\n    \\n\\t.then(\\n    (data) => {\\nthis.setState({ data:data });\\n\\t\\t\\tStatusBar.setNetworkActivityIndicatorVisible(false);\\n        }\\n\")])])]),a(\"h3\",{attrs:{id:\"shouldcomponentupdate\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#shouldcomponentupdate\"}},[t._v(\"#\")]),t._v(\" shouldComponentUpdate\")]),t._v(\" \"),a(\"p\",[t._v(\"shouldComponentUpdate 这个方法用来判断是否需要调用 render 方法重新描绘 dom。因为 dom 的描绘非常消耗性能，如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"展示组件-presentational-component-和容器组件-container-component-之间有何不同\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#展示组件-presentational-component-和容器组件-container-component-之间有何不同\"}},[t._v(\"#\")]),t._v(\" 展示组件(Presentational component)和容器组件(Container component)之间有何不同\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"展示组件关心组件看起来是什么。展示专门通过 props 接受数据和回调，并且几乎不会有自身的状态，但当展示组件拥有自身的状态时，通常也只关心 UI 状态而不是数据的状态。\")]),t._v(\" \"),a(\"li\",[t._v(\"容器组件则更关心组件是如何运作的。容器组件会为展示组件或者其它容器组件提供数据和行为(behavior)，它们会调用 Flux actions，并将其作为回调提供给展示组件。容器组件经常是有状态的，因为它们是(其它组件的)数据源。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"类组件-class-component-和函数式组件-functional-component-之间有何不同\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类组件-class-component-和函数式组件-functional-component-之间有何不同\"}},[t._v(\"#\")]),t._v(\" 类组件(Class component)和函数式组件(Functional component)之间有何不同\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问 store 并维持状态\")]),t._v(\" \"),a(\"li\",[t._v(\"当组件仅是接收 props，并将组件自身渲染到页面时，该组件就是一个 '无状态组件(stateless component)'，可以使用一个纯函数来创建这样的组件。这种组件也被称为哑组件(dumb components)或展示组件\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"状态-state-和属性-props-之间有何不同\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#状态-state-和属性-props-之间有何不同\"}},[t._v(\"#\")]),t._v(\" 状态(state)和属性(props)之间有何不同\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"State 是一种数据结构，用于组件挂载时所需数据的默认值。State 可能会随着时间的推移而发生突变，但多数时候是作为用户事件行为的结果。\")]),t._v(\" \"),a(\"li\",[t._v(\"Props(properties 的简写)则是组件的配置。props 由父组件传递给子组件，并且就子组件而言，props 是不可变的(immutable)。组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)。Props 也不仅仅是数据--回调函数也可以通过 props 传递。\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"何为受控组件-controlled-component\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何为受控组件-controlled-component\"}},[t._v(\"#\")]),t._v(\" 何为受控组件(controlled component)\")]),t._v(\" \"),a(\"p\",[t._v(\"在 HTML 中，类似 \"),a(\"code\",[t._v(\",\")]),t._v(' 和 `` 这样的表单元素会维护自身的状态，并基于用户的输入来更新。当用户提交表单时，前面提到的元素的值将随表单一起被发送。但在 React 中会有些不同，包含表单元素的组件将会在 state 中追踪输入的值，并且每次调用回调函数时，如 onChange 会更新 state，重新渲染组件。一个输入表单元素，它的值通过 React 的这种方式来控制，这样的元素就被称为\"受控元素\"。')]),t._v(\" \"),a(\"h3\",{attrs:{id:\"何为高阶组件-higher-order-component\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何为高阶组件-higher-order-component\"}},[t._v(\"#\")]),t._v(\" 何为高阶组件(higher order component)\")]),t._v(\" \"),a(\"p\",[t._v(\"高阶组件是一个以组件为参数并返回一个新组件的函数。HOC 运行你重用代码、逻辑和引导抽象。最常见的可能是 Redux 的 connect 函数。除了简单分享工具库和简单的组合，HOC 最好的方式是共享 React 组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象\"}},[t._v(\"#\")]),t._v(\" 为什么建议传递给 setState 的参数是一个 callback 而不是一个对象\")]),t._v(\" \"),a(\"p\",[t._v(\"因为 this.props 和 this.state 的更新可能是异步的，不能依赖它们的值去计算下一个 state。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"除了在构造函数中绑定-this，还有其它方式吗\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#除了在构造函数中绑定-this，还有其它方式吗\"}},[t._v(\"#\")]),t._v(\" 除了在构造函数中绑定 this，还有其它方式吗\")]),t._v(\" \"),a(\"p\",[t._v(\"你可以使用属性初始值设定项(property initializers)来正确绑定回调，create-react-app 也是默认支持的。在回调中你可以使用箭头函数，但问题是每次组件渲染时都会创建一个新的回调。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"在构造函数中-调用-super-props-的目的是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在构造函数中-调用-super-props-的目的是什么\"}},[t._v(\"#\")]),t._v(\" (在构造函数中)调用 super(props) 的目的是什么\")]),t._v(\" \"),a(\"p\",[t._v(\"在 super() 被调用之前，子类是不能使用 this 的，在 ES2015 中，子类必须在 constructor 中调用 super()。传递 props 给 super() 的原因则是便于(在子类中)能在 constructor 访问 this.props。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"应该在-react-组件的何处发起-ajax-请求\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#应该在-react-组件的何处发起-ajax-请求\"}},[t._v(\"#\")]),t._v(\" 应该在 React 组件的何处发起 Ajax 请求\")]),t._v(\" \"),a(\"p\",[t._v(\"在 React 组件中，应该在 componentDidMount 中发起网络请求。这个方法会在组件第一次“挂载”(被添加到 DOM)时执行，在组件的生命周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前 Ajax 请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件上调用 setState，这将不起作用。在 componentDidMount 中发起网络请求将保证这有一个组件可以更新了。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"事件在-react-中的处理方式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事件在-react-中的处理方式\"}},[t._v(\"#\")]),t._v(\" 事件在 React 中的处理方式\")]),t._v(\" \"),a(\"p\",[t._v(\"为了解决跨浏览器兼容性问题，您的 React 中的事件处理程序将传递 SyntheticEvent 的实例，它是 React 的浏览器本机事件的跨浏览器包装器。\")]),t._v(\" \"),a(\"p\",[t._v(\"这些 SyntheticEvent 与您习惯的原生事件具有相同的接口，除了它们在所有浏览器中都兼容。有趣的是，React 实际上并没有将事件附加到子节点本身。React 将使用单个事件监听器监听顶层的所有事件。这对于性能是有好处的，这也意味着在更新 DOM 时，React 不需要担心跟踪事件监听器。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"createelement-和-cloneelement-有什么区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#createelement-和-cloneelement-有什么区别\"}},[t._v(\"#\")]),t._v(\" createElement 和 cloneElement 有什么区别\")]),t._v(\" \"),a(\"p\",[t._v(\"React.createElement():JSX 语法就是用 React.createElement()来构建 React 元素的。它接受三个参数，第一个参数可以是一个标签名。如 div、span，或者 React 组件。第二个参数为传入的属性。第三个以及之后的参数，皆作为组件的子组件。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"React.createElement(\\n    type,\\n    [props],\\n    [...children]\\n)\\n\")])])]),a(\"p\",[t._v(\"React.cloneElement()与 React.createElement()相似，不同的是它传入的第一个参数是一个 React 元素，而不是标签名或组件。新添加的属性会并入原有的属性，传入到返回的新元素中，而就的子元素奖杯替换。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"React.cloneElement(\\n  element,\\n  [props],\\n  [...children]\\n)\\n\")])])]),a(\"h3\",{attrs:{id:\"react-中有三种构建组件的方式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react-中有三种构建组件的方式\"}},[t._v(\"#\")]),t._v(\" React 中有三种构建组件的方式\")]),t._v(\" \"),a(\"p\",[t._v(\"React.createClass()、ES6 class 和无状态函数。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"react-组件的划分业务组件技术组件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react-组件的划分业务组件技术组件\"}},[t._v(\"#\")]),t._v(\" react 组件的划分业务组件技术组件\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"根据组件的职责通常把组件分为 UI 组件和容器组件。\")]),t._v(\" \"),a(\"li\",[t._v(\"UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。\")]),t._v(\" \"),a(\"li\",[t._v(\"两者通过 React-Redux 提供 connect 方法联系起来。\")])]),t._v(\" \"),a(\"hr\")])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}